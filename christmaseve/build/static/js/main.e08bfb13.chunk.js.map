{"version":3,"sources":["Components/ChristmasDay.js","App.js","serviceWorker.js","index.js"],"names":["ChristmasDay","props","context","state","rows","diff","date","checkDate","current","Date","this","getDate","calcDiff","nextChristmas","getFullYear","daysBetween","row","w","key","words","size","rowWords","Math","min","word","name","setState","dt1","dt2","difference","UTC","getMonth","ceil","bind","setInterval","className","map","style","fontSize","visibility","width","maxWidth","margin","backgroundColor","display","height","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAEaA,EAAb,YASI,WAAYC,EAAOC,GAAU,IAAD,8BACxB,4CAAMD,EAAOC,KARjBC,MAAQ,CACJC,KAAO,GACPC,MAAQ,EACRC,KAAO,GAIiB,EAU5BC,UAAY,WACR,IAAIC,EAAU,IAAIC,KACEC,KAAKP,MAAMG,OACXE,EAAQG,WACxBD,KAAKE,YAde,EAkB5BA,SAAW,WACP,IAAIJ,EAAU,IAAIC,KACdI,EAAe,IAAIJ,KAAMD,EAAQM,cAAc,GAAG,IAClDT,EAAOK,KAAKK,YAAYP,EAASK,GACjCR,EAAO,IACPQ,EAAe,IAAIJ,KAAMD,EAAQM,cAAc,EAAE,GAAG,IACpDT,EAAOK,KAAKK,YAAYP,EAASK,IAGrC,IAAIT,EAAO,GACX,GAAa,IAATC,EAKA,IAHA,IACIW,EAAM,EACNC,EAAIZ,EAAK,EACNY,EAAI,GAAG,CACVb,EAAKY,GAAO,GACZZ,EAAKY,GAAKE,IAAMF,EAChBZ,EAAKY,GAAKG,MAAQ,GAClBf,EAAKY,GAAKI,KAAQ,EAAG,KAAMJ,EAAM,KAEjC,IADA,IAAIK,EAAWC,KAAKC,IAAIN,EARV,IASLO,EAAO,EAAGA,EAAOH,EAAUG,IAChCpB,EAAKY,GAAKG,MAAMK,GAAQ,GACxBpB,EAAKY,GAAKG,MAAMK,GAAMC,KAAO,MAC7BrB,EAAKY,GAAKG,MAAMK,GAAMN,IAAMM,EAEhCP,GAAKI,EACLL,IACAK,GAAY,EAGpBX,KAAKgB,SAAS,CACVtB,OACAC,OACAC,KAAOE,EAAQG,aApDK,EAwD5BI,YAAc,SAAUY,EAAKC,GACzB,IAKIC,EAHMpB,KAAKqB,IAAIF,EAAId,cAAec,EAAIG,WAAYH,EAAIjB,WAChDF,KAAKqB,IAAIH,EAAIb,cAAea,EAAII,WAAYJ,EAAIhB,WAI1D,OAAOW,KAAKU,KAAKH,EAPL,QAtDZ,EAAKtB,UAAY,EAAKA,UAAU0B,KAAf,gBAHO,EAThC,iFAgBQC,YAAYxB,KAAKH,UAAW,OAhBpC,+BA4Ec,IAAD,EACcG,KAAKP,MAAnBC,EADA,EACAA,KAAMC,EADN,EACMA,KAEX,OACI,6BACI,yBAAK8B,UAAU,oBACX,0BAAMA,UAAU,kBAAhB,eACA,0BAAMA,UAAU,oBAA6B,IAAV9B,EAAc,iBAA4B,IAATA,EAAa,iBAAmB,mBACnGD,EAAKgC,IAAI,SAAApB,GACN,OACA,0BAAMqB,MAAO,CAACC,SAAUtB,EAAII,MAAOF,IAAOF,EAAIE,KACzCF,EAAIG,MAAMiB,IAAI,SAAAZ,GACX,OACA,0BAAMN,IAAKM,EAAKN,KACXM,EAAKC,KAAO,WAQjC,yBAAKY,MAAO,CAACE,WAAY,SAAUC,MAAO,MAAOC,SAAU,QAASC,OAAQ,OAAQC,gBAAiB,sBACjG,yBAAKN,MAAO,CAACG,OAAU,IAAInC,GAAQ,IAAO,IAAK,IAAKuC,QAAS,QAASC,OAAQ,OAASF,gBAAiB,kCAnG5H,GAAkCG,aCQnBC,MANf,WACE,OACI,kBAAC,EAAD,OCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.e08bfb13.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nexport class ChristmasDay extends Component {\r\n\r\n    state = {\r\n        rows : [],\r\n        diff : -1,\r\n        date : 0\r\n    };\r\n\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        this.checkDate = this.checkDate.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(this.checkDate, 1000);\r\n    }\r\n\r\n    checkDate = function() {\r\n        let current = new Date();\r\n        const lastChecked = this.state.date;\r\n        if (lastChecked !== current.getDate()) {\r\n            this.calcDiff();\r\n        }\r\n    };\r\n\r\n    calcDiff = function() {\r\n        let current = new Date();\r\n        let nextChristmas =new Date (current.getFullYear(),11,25);\r\n        let diff = this.daysBetween(current, nextChristmas);\r\n        if (diff < 0) {\r\n            nextChristmas =new Date (current.getFullYear()+1,11,25);\r\n            diff = this.daysBetween(current, nextChristmas);\r\n        }\r\n\r\n        let rows = [];\r\n        if (diff !== 0) {\r\n\r\n            let maxRowWords = 12;\r\n            let row = 0;\r\n            let w = diff-1;\r\n            while (w > 0) {\r\n                rows[row] = [];\r\n                rows[row].key = row;\r\n                rows[row].words = [];\r\n                rows[row].size = (6-(0.125*row))+'em';\r\n                let rowWords = Math.min(w,maxRowWords);\r\n                for (let word = 0; word < rowWords; word++) {\r\n                    rows[row].words[word] = [];\r\n                    rows[row].words[word].name = 'Eve';\r\n                    rows[row].words[word].key = word;\r\n                }\r\n                w -= rowWords;\r\n                row ++;\r\n                rowWords += 0;\r\n            }\r\n        }\r\n        this.setState({\r\n            rows,\r\n            diff,\r\n            date : current.getDate()\r\n        })\r\n    };\r\n\r\n    daysBetween = function( dt1, dt2 ) {\r\n        let one_day=1000*60*60*24;\r\n\r\n        let nd2 = Date.UTC(dt2.getFullYear(), dt2.getMonth(), dt2.getDate());\r\n        let nd1 = Date.UTC(dt1.getFullYear(), dt1.getMonth(), dt1.getDate());\r\n\r\n        let difference = nd2 - nd1;\r\n\r\n        return Math.ceil(difference/one_day);\r\n    };\r\n\r\n    render() {\r\n        let {rows, diff} = this.state;\r\n\r\n        return(\r\n            <div>\r\n                <div className='p-5 d-block flex'>\r\n                    <span className='font-size-huge'>Today is...</span>\r\n                    <span className='font-size-large'>{diff === -1 ? 'A Special Day!' : diff === 0 ? 'Christmas Day!' : ' Christmas Eve '}</span>\r\n                    {rows.map(row => {\r\n                        return (\r\n                        <span style={{fontSize: row.size}} key = {row.key}>\r\n                            {row.words.map(word => {\r\n                                return(\r\n                                <span key={word.key}>\r\n                                    {word.name + ' '}\r\n                                </span>\r\n                                )\r\n                            })}\r\n                        </span>\r\n                        )\r\n                    })}\r\n                </div>\r\n                <div style={{visibility: 'hidden', width: '90%', maxWidth: '900px', margin: 'auto', backgroundColor: 'rgba(80,80,150,1)'}}>\r\n                    <div style={{width: (((365-diff) / 365) * 100)+'%', display: 'block', height: 20+'px', backgroundColor: 'rgba(255,255,255,0.25)'}} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport {ChristmasDay} from \"./Components/ChristmasDay\";\n\nfunction App() {\n  return (\n      <ChristmasDay />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}